openapi: 3.0.3
info:
  title: RPI Measurement API
  description: |
    <img src="https://github.com/alkolhar/alkolhar.github.io/blob/master/images/measure.png?raw=true"/><br>
    OpenAPI description of the rpi-measure repository.
    
    Project description can be found [here](https://github.com/alkolhar/rpi-measure)
  version: 0.1.0
servers:
  - url: 'https'
paths:
  /sensors/list:
    get:
      tags:
        - sensor
      summary: Get all existing sensors
      operationId: listSensors
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
  /sensors/{id}:
    parameters:
      - $ref: '#/components/parameters/sid'
    get:
      tags:
        - sensor
      summary: Get sensor by id
      operationId: getSensorById
      responses:
        200:
          $ref: '#/components/responses/resSensor'
        400:
          description: Invalid ID supplied
        404:
          description: Sensor not found
    put:
      tags:
        - sensor
      summary: Update sensor by id
      operationId: updateSensorById
      requestBody:
        description: Update an existent sensor in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
        400:
          description: Invalid Id supplied
        404:
          description: Sensor not found
        405:
          description: Validation exception
      security:
        - sensor_auth:
            - write:sensor
            - read:sensor
  /sensors/{id}/actual:
    get:
      tags:
        - sensor
      summary: Get the actual sensor value by id
      operationId: getSensorValueById
      parameters:
        - $ref: '#/components/parameters/sid'
      responses:
        200:
          $ref: '#/components/responses/resValue'
        400:
          description: Invalid ID supplied
        404:
          description: Sensor not found
  /sensors/{id}/lasthours/{time}:
    get:
      tags:
        - sensor
      summary: Get all readouts from the sensor in the past x hours
      operationId: getSensorValueInTime
      parameters:
        - $ref: '#/components/parameters/sid'
        - $ref: '#/components/parameters/time'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 50
                items:
                  $ref: '#/components/schemas/SensorValue'
  /sensors/{id}/average/{time}:
    get:
      tags:
        - sensor
      summary: Get an average readout from the sensor in the past x hours
      operationId: getSensorAvgInTime
      parameters:
        - $ref: '#/components/parameters/sid'
        - $ref: '#/components/parameters/time'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: number
  /sensors/{id}/uploadImage:
    post:
      tags:
        - sensor
      summary: uploads an image
      description: Upload an image to visualize the sensor
      operationId: uploadImg
      parameters:
        - name: id
          in: path
          description: Id of the sensor to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Ok
      security:
        - sensor_auth:
            - write:sensor
            - read:sensor
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user. This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login/:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied.
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: Ok
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: Ok
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found




components:
  parameters:
    sid:
      name: id
      in: path
      description: ID of the sensor to return
      required: true
      schema:
        type: integer
    time:
      name: time
      in: path
      description: Timeframe in hours (max. 24)
      required: false
      schema:
        type: integer
        maximum: 24
  responses:
    resValue:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SensorValue'
    resSensor:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sensor'

  schemas:
    SensorValue:
      type: object
      properties:
        value:
          type: number
          maxLength: 5
          example: 18.4
        unit:
          type: string
          maxLength: 5
          example: Â°C
    Tags:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Sensor:
      type: object
      properties:
        id:
          type: integer
          example: 117
        name:
          type: string
          maxLength: 20
          example: tempBedroom
        photoUrl:
          type: string
        description:
          type: string
          example: Temperatursensor im Schlafzimmer
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: Mustermann
        email:
          type: string
          example: max@musterman.com
        password:
          type: string
          example: Th1sIsAStr0ngP455w0rD
        phone:
          type: string
          example: 088 786 43 43
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
  securitySchemes:
    sensor_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https'
          scopes:
            write:sensor: modify sensors in database
            read:sensor: read sensors in database
